name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
      - name: "Run `cargo check`"
        uses: actions-rs/cargo@v1
        with:
          command: check

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          components: rust-src, llvm-tools-preview

      # install QEMU
      - name: Install QEMU (Linux)
        run: sudo apt update && sudo apt install qemu-system-x86
        if: runner.os == 'Linux'
      - name: Install QEMU (macOS)
        run: brew install qemu
        if: runner.os == 'macOS'
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: 1
          HOMEBREW_NO_INSTALL_CLEANUP: 1
      - name: Install Scoop (Windows)
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          echo "$HOME\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        if: runner.os == 'Windows'
        shell: pwsh
      - name: Install QEMU (Windows)
        run: scoop install qemu
        if: runner.os == 'Windows'
        shell: pwsh
      - name: "Print QEMU Version"
        run: qemu-system-x86_64 --version

      - name: Run `cargo test`
        uses: actions-rs/cargo@v1
        with:
          command: test
      - name: Build
        run: sh build_utils.sh --clean
      - name: Run tests
        run: cargo test --verbose

  fmt:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: rustfmt
      - name: Run `cargo fmt --all -- --check`
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: clippy
      - name: Run `cargo clippy`
        uses: actions-rs/cargo@v1
        with:
          command: clippy